name: Deploy to HPC with Singularity

on:
  workflow_run:
    workflows: ["Build and Push Docker Image"]
    types:
      - completed
    branches: [master, main]
  workflow_dispatch:  # Allow manual triggering
    inputs:
      docker_tag:
        description: 'Docker image tag to deploy'
        required: false
        default: 'v0.0.30'
        type: string

env:
  # Try to get the tag from:
  # 1. Manual workflow input
  # 2. Upstream workflow output
  # 3. Default to v0.0.30
  DOCKER_TAG: ${{ github.event.inputs.docker_tag || 'v0.0.30' }}

jobs:
  deploy_to_hpc:
    name: Deploy Singularity Image to HPC
    runs-on: self-hosted
    # Only run if the upstream workflow was successful or this is a manual trigger
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        
      - name: Setup SSH keys and configuration
        run: |
          # Create the .ssh directory if it doesn't exist
          mkdir -p ~/.ssh
          
          # Create private key from secret with proper format
          # Ensure it includes the proper BEGIN/END markers
          echo "-----BEGIN OPENSSH PRIVATE KEY-----" > ~/.ssh/id_ed25519
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | grep -v "OPENSSH PRIVATE KEY" >> ~/.ssh/id_ed25519
          echo "-----END OPENSSH PRIVATE KEY-----" >> ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          
          # Create a temporary SSH config directory
          mkdir -p ~/.ssh/temp_config
          
          # Create an SSH config file with proper settings
          cat > ~/.ssh/temp_config/config << EOF
          Host bmicluster
            HostName bmiclusterp.chmcres.cchmc.org
            User pavb5f
            IdentityFile ~/.ssh/id_ed25519
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
            BatchMode yes
            IdentitiesOnly yes
            LogLevel DEBUG3
            ConnectTimeout 30
            ServerAliveInterval 60
            ServerAliveCountMax 5

          Host bmicluster-compute
            User pavb5f
            HostName bmi-460g10-04.chmcres.cchmc.org
            IdentityFile ~/.ssh/id_ed25519
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
            BatchMode yes
            IdentitiesOnly yes
            LogLevel DEBUG3
            ProxyJump bmicluster
            ConnectTimeout 30
            ServerAliveInterval 60
            ServerAliveCountMax 5
          EOF
          
          chmod 600 ~/.ssh/temp_config/config
          
          # Verify SSH key format
          echo "Checking SSH key format:"
          ssh-keygen -l -f ~/.ssh/id_ed25519 || echo "Invalid key format"
          
          # Make sure SSH agent is running
          eval $(ssh-agent -s)
          ssh-add -v ~/.ssh/id_ed25519
          
          # Test network connectivity (basic)
          ping -c 2 bmiclusterp.chmcres.cchmc.org || echo "Cannot ping jump host (may be blocked or normal if ICMP is disabled)"
          
          echo "SSH configuration created successfully"
      
      - name: Test SSH Connection
        run: |
          echo "Testing SSH connection to jump host..."
          ssh -vvv -F ~/.ssh/temp_config/config bmicluster "hostname && whoami" || {
            echo "ERROR: SSH connection to jump host failed"
            echo "Attempting connection with different options..."
            # Try without BatchMode to see if it prompts for password
            ssh -vvv -F ~/.ssh/temp_config/config -o BatchMode=no -o PasswordAuthentication=no bmicluster "hostname" || true
            exit 1
          }
          
          echo "Testing SSH connection to compute node..."
          ssh -vvv -F ~/.ssh/temp_config/config bmicluster-compute "hostname && whoami" || {
            echo "ERROR: SSH connection to compute node failed"
            echo "Check if we can connect to the jump host at all:"
            ssh -vvv -F ~/.ssh/temp_config/config bmicluster "echo 'Jump host connection works'" || true
            exit 1
          }
          
          echo "SSH connections verified successfully"
      
      - name: Make deployment script executable
        run: chmod +x scripts/deploy_to_hpc.sh
      
      - name: Copy deployment script to compute node
        run: |
          echo "Copying deployment script to compute node..."
          scp -F ~/.ssh/temp_config/config scripts/deploy_to_hpc.sh bmicluster-compute:/tmp/deploy_to_hpc.sh
          ssh -F ~/.ssh/temp_config/config bmicluster-compute "chmod +x /tmp/deploy_to_hpc.sh"
          echo "Deployment script copied successfully"
      
      - name: Execute deployment on compute node
        id: deploy
        run: |
          echo "Starting Singularity image deployment with version ${{ env.DOCKER_TAG }}..."
          ssh -F ~/.ssh/temp_config/config bmicluster-compute "/tmp/deploy_to_hpc.sh ${{ env.DOCKER_TAG }}" | tee deployment.log
      
      - name: Verify deployment
        run: |
          echo "Verifying deployment..."
          ssh -F ~/.ssh/temp_config/config bmicluster-compute "ls -la /data/barskilab/scidap_server/singularity_images/biowardrobe2_scidap-deseq:${{ env.DOCKER_TAG }}.sif" || {
            echo "ERROR: Failed to verify Singularity image exists"
            exit 1
          }
          
          version=$(ssh -F ~/.ssh/temp_config/config bmicluster-compute "cat /data/barskilab/scidap_server/singularity_images/scidap-deseq-version.txt")
          echo "Deployment verified. Current version: $version"
      
      - name: Clean up remote script
        if: always()
        run: |
          ssh -F ~/.ssh/temp_config/config bmicluster-compute "rm -f /tmp/deploy_to_hpc.sh" || echo "Warning: Failed to clean up remote script" 