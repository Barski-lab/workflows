name: Deploy to HPC

on:
  workflow_dispatch:
    inputs:
      docker_tag:
        description: 'Docker tag to deploy'
        required: true
        type: string
        default: 'v0.0.31'
      target_host:
        description: 'Target HPC host'
        required: true
        type: string
        default: 'bmicluster-compute'
  workflow_run:
    workflows: ["Build and Push Docker Image"]
    types:
      - completed
    branches:
      - master
      - main

jobs:
  deploy:
    name: Deploy to HPC
    runs-on: self-hosted
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history to extract the correct tag
      
      - name: Download artifacts if workflow_run triggered
        if: ${{ github.event_name == 'workflow_run' }}
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{ github.event.workflow_run.id }}
            });
            
            const matchArtifact = artifacts.data.artifacts.find(artifact => {
              return artifact.name == "docker-tag"
            });
            
            if (matchArtifact) {
              const download = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: matchArtifact.id,
                archive_format: 'zip'
              });
              
              const fs = require('fs');
              fs.writeFileSync('docker-tag.zip', Buffer.from(download.data));
              console.log('Artifact downloaded');
              
              const { execSync } = require('child_process');
              execSync('unzip docker-tag.zip');
              const dockerTag = fs.readFileSync('docker_tag.txt', 'utf8').trim();
              console.log(`Using Docker tag from previous workflow: ${dockerTag}`);
              
              // Set output for use in later steps
              core.exportVariable('DOCKER_TAG', dockerTag);
            } else {
              console.log('No docker-tag artifact found, using default tag');
              core.exportVariable('DOCKER_TAG', 'v0.0.31');
            }
            core.exportVariable('TARGET_HOST', 'bmicluster-compute');
      
      - name: Set Docker tag from git or input
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          # Use the input value
          echo "DOCKER_TAG=${{ github.event.inputs.docker_tag }}" >> $GITHUB_ENV
          echo "TARGET_HOST=${{ github.event.inputs.target_host }}" >> $GITHUB_ENV
          
          echo "Using Docker tag: ${{ github.event.inputs.docker_tag }}"
          echo "Using target host: ${{ github.event.inputs.target_host }}"
      
      - name: Display active settings
        run: |
          echo "Using Docker tag: $DOCKER_TAG"
          echo "Using target host: $TARGET_HOST"
      
      - name: Deploy using direct command
        run: |
          set -x  # Debug mode to show all commands
          
          # Execute the Singularity pull directly on the current machine
          echo "Creating destination directory..."
          mkdir -p /data/barskilab/scidap_server/singularity_images || { echo "Failed to create directory"; exit 1; }
          
          echo "Loading Singularity module..."
          module load singularity/3.7.0 || { echo "Failed to load Singularity module"; exit 1; }
          
          echo "Pulling Docker image..."
          singularity pull --force /data/barskilab/scidap_server/singularity_images/scidap-deseq_${DOCKER_TAG}.sif docker://biowardrobe2/scidap-deseq:${DOCKER_TAG} || { echo "Failed to pull image"; exit 1; }
          
          echo "Setting permissions..."
          chmod 644 /data/barskilab/scidap_server/singularity_images/scidap-deseq_${DOCKER_TAG}.sif
          
          echo "Deployment completed successfully"
          echo "Image available at: /data/barskilab/scidap_server/singularity_images/scidap-deseq_${DOCKER_TAG}.sif"