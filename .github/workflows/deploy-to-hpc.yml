name: Deploy to HPC

on:
  workflow_dispatch:
    inputs:
      docker_tag:
        description: 'Docker tag to deploy'
        required: false
        type: string
        default: 'v0.0.31'
      target_host:
        description: 'Target HPC host'
        required: false
        type: choice
        default: 'bmicluster-compute'
        options:
          - bmicluster
          - bmicluster-compute
  workflow_run:
    workflows: ["Build and Push Docker Image"]
    types:
      - completed
    branches:
      - master
      - main

jobs:
  deploy:
    name: Deploy to HPC
    runs-on: self-hosted
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set Docker tag from previous workflow or input
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # Use the input value
            echo "DOCKER_TAG=${{ github.event.inputs.docker_tag }}" >> $GITHUB_ENV
            echo "TARGET_HOST=${{ github.event.inputs.target_host }}" >> $GITHUB_ENV
          else
            # For workflow_run trigger, use the default or hard-coded version
            # (Since artifact passing between workflows can be unreliable)
            echo "DOCKER_TAG=v0.0.31" >> $GITHUB_ENV
            echo "TARGET_HOST=bmicluster-compute" >> $GITHUB_ENV
          fi
          
          echo "Using Docker tag: $DOCKER_TAG"
          echo "Using target host: $TARGET_HOST"
      
      - name: Setup SSH key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          set -x  # Echo commands for better debugging
          
          # Create .ssh directory
          mkdir -p ~/.ssh
          
          # Debug: Check if secret is available
          echo "Checking if SSH_PRIVATE_KEY secret is available..."
          if [ -z "$SSH_PRIVATE_KEY" ]; then
            echo "ERROR: SSH_PRIVATE_KEY secret is empty or not set"
            exit 1
          fi
          
          # Create the SSH key with proper format
          printf "%s\n" "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
          
          # Debug: Check key file content
          echo "Checking key file content..."
          if [ ! -s ~/.ssh/id_ed25519 ]; then
            echo "ERROR: Key file is empty"
            exit 1
          fi
          
          # Verify the key format
          if ! grep -q "BEGIN OPENSSH PRIVATE KEY" ~/.ssh/id_ed25519; then
            echo "ERROR: Key does not contain proper OpenSSH format"
            echo "First line of key:"
            head -n 1 ~/.ssh/id_ed25519
            echo "Last line of key:"
            tail -n 1 ~/.ssh/id_ed25519
            echo "Key file size:"
            ls -l ~/.ssh/id_ed25519
            exit 1
          fi
          
          # Set proper permissions
          chmod 600 ~/.ssh/id_ed25519
          
          # Check key format validity
          echo "Key fingerprint:"
          ssh-keygen -l -f ~/.ssh/id_ed25519 || {
            echo "ERROR: Invalid key format"
            echo "Key contents (first line):"
            head -n 1 ~/.ssh/id_ed25519
            echo "Key file size:"
            ls -l ~/.ssh/id_ed25519
            exit 1
          }
          
          # Start SSH agent
          eval $(ssh-agent -s)
          ssh-add -v ~/.ssh/id_ed25519 || {
            echo "ERROR: Failed to add key to SSH agent"
            echo "SSH agent status:"
            ssh-agent
            echo "Key file permissions:"
            ls -l ~/.ssh/id_ed25519
            exit 1
          }
          
          # Create SSH config
          cat > ~/.ssh/config << EOF
          Host bmicluster
            HostName bmiclusterp.chmcres.cchmc.org
            User pavb5f
            IdentityFile ~/.ssh/id_ed25519
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
            LogLevel DEBUG3
            ConnectTimeout 30
          
          Host bmicluster-compute
            HostName bmiclusterp.chmcres.cchmc.org
            User pavb5f
            IdentityFile ~/.ssh/id_ed25519
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
            LogLevel DEBUG3
            ConnectTimeout 30
            RequestTTY yes
            RemoteCommand ssh bmicluster-compute
          EOF
          
          # Set proper permissions for config
          chmod 600 ~/.ssh/config
          
          # Show system information
          echo "=== SYSTEM INFO ==="
          uname -a
          which ssh
          ssh -V
          
          # Check firewall (basic)
          echo "=== NETWORK CHECKS ==="
          ping -c 2 bmiclusterp.chmcres.cchmc.org || echo "Cannot ping jump host (may be normal)"
          nc -zv bmiclusterp.chmcres.cchmc.org 22 || echo "Cannot connect to port 22"
      
      - name: Test SSH connection
        run: |
          echo "Testing SSH connection to ${{ inputs.target_host }}..."
          ssh -vvv ${{ inputs.target_host }} "echo SSH_CONNECTION_SUCCESS" || {
            echo "ERROR: SSH connection failed"
            echo "Checking key permissions:"
            ls -la ~/.ssh/id_ed25519
            echo "Checking config permissions:"
            ls -la ~/.ssh/config
            echo "Checking SSH agent:"
            ssh-agent
            echo "Checking loaded keys:"
            ssh-add -l || echo "No keys loaded"
            echo "Checking key file content:"
            head -n 1 ~/.ssh/id_ed25519
            tail -n 1 ~/.ssh/id_ed25519
            exit 1
          }
      
      - name: Deploy to HPC
        run: |
          # Use environment variables set in earlier step
          echo "Deploying docker tag: $DOCKER_TAG to host: $TARGET_HOST"
          
          # Deploy using the deployment script
          ./deploy.sh
          
          # Verify deployment
          echo "Verifying deployment..."
          ssh $TARGET_HOST "docker ps | grep $DOCKER_TAG" || {
            echo "ERROR: Container not running"
            exit 1
          }
      
      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/id_ed25519 ~/.ssh/config 