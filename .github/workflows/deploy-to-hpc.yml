name: Deploy to HPC with Singularity

on:
  workflow_run:
    workflows: ["Build and Push Docker Image"]
    types:
      - completed
  workflow_dispatch:  # Allow manual triggering

env:
  LOG_DIR: "/tmp/gh-action-logs"

jobs:
  debug_ssh:
    runs-on: self-hosted
    steps:
      - name: Check SSH environment
        run: |
          mkdir -p ${{ env.LOG_DIR }}
          echo "=== Environment info ===" > ${{ env.LOG_DIR }}/ssh_debug.log
          echo "Running as user: $(whoami)" >> ${{ env.LOG_DIR }}/ssh_debug.log
          echo "Home directory: $HOME" >> ${{ env.LOG_DIR }}/ssh_debug.log
          echo "Current directory: $(pwd)" >> ${{ env.LOG_DIR }}/ssh_debug.log
          echo "SSH_AUTH_SOCK: $SSH_AUTH_SOCK" >> ${{ env.LOG_DIR }}/ssh_debug.log
          
          echo "=== SSH Config ===" >> ${{ env.LOG_DIR }}/ssh_debug.log
          cat ~/.ssh/config >> ${{ env.LOG_DIR }}/ssh_debug.log 2>&1 || echo "No SSH config found" >> ${{ env.LOG_DIR }}/ssh_debug.log
          
          echo "=== SSH Key ===" >> ${{ env.LOG_DIR }}/ssh_debug.log
          ls -la ~/.ssh/ >> ${{ env.LOG_DIR }}/ssh_debug.log 2>&1
          
          echo "=== Testing connectivity ===" >> ${{ env.LOG_DIR }}/ssh_debug.log
          
          # First attempt with SSH agent forwarding
          echo "Connection test with normal SSH:" >> ${{ env.LOG_DIR }}/ssh_debug.log
          ssh -v bmicluster "hostname && whoami" >> ${{ env.LOG_DIR }}/ssh_debug.log 2>&1 || echo "SSH connection failed with normal config" >> ${{ env.LOG_DIR }}/ssh_debug.log
          
          # Test with explicit key
          echo "Connection test with explicit key:" >> ${{ env.LOG_DIR }}/ssh_debug.log
          ssh -v -i ~/.ssh/id_ed25519 bmiclusterp.chmcres.cchmc.org -l pavb5f "hostname && whoami" >> ${{ env.LOG_DIR }}/ssh_debug.log 2>&1 || echo "SSH connection failed with explicit key" >> ${{ env.LOG_DIR }}/ssh_debug.log
          
          # Test with StrictHostKeyChecking disabled
          echo "Connection test with disabled host key checking:" >> ${{ env.LOG_DIR }}/ssh_debug.log
          ssh -v -o StrictHostKeyChecking=no -i ~/.ssh/id_ed25519 bmiclusterp.chmcres.cchmc.org -l pavb5f "hostname && whoami" >> ${{ env.LOG_DIR }}/ssh_debug.log 2>&1 || echo "SSH connection failed with disabled host checking" >> ${{ env.LOG_DIR }}/ssh_debug.log
          
          # Print the results
          echo "=== DEBUG LOG CONTENTS ==="
          cat ${{ env.LOG_DIR }}/ssh_debug.log
          cp ${{ env.LOG_DIR }}/ssh_debug.log ~/ssh_debug.log
          echo "Full debug log saved to ~/ssh_debug.log"
      
  test_connection:
    needs: debug_ssh
    runs-on: self-hosted
    steps:
      - name: Setup logging
        run: |
          mkdir -p ${{ env.LOG_DIR }}
          echo "Starting run at $(date)" > ${{ env.LOG_DIR }}/run_log.txt
          echo "Running as user: $(whoami)" >> ${{ env.LOG_DIR }}/run_log.txt
          
      - name: Use exact same SSH environment
        run: |
          # Create a temporary SSH config that forces usage of the key
          mkdir -p ~/.ssh/temp_config
          cat > ~/.ssh/temp_config/config << EOF
          Host bmicluster
            HostName bmiclusterp.chmcres.cchmc.org
            User pavb5f
            IdentityFile ~/.ssh/id_ed25519
            StrictHostKeyChecking no
            BatchMode yes
            IdentitiesOnly yes

          Host bmicluster-compute
            User pavb5f
            HostName bmi-460g10-04.chmcres.cchmc.org
            StrictHostKeyChecking no
            BatchMode yes
            IdentitiesOnly yes
            ProxyJump bmicluster
          EOF
          
          chmod 600 ~/.ssh/temp_config/config
          
      - name: SSH to jump host with temporary config
        run: |
          echo "Testing connection to jump host with temp config:" | tee -a ${{ env.LOG_DIR }}/run_log.txt
          ssh -vF ~/.ssh/temp_config/config bmicluster "hostname && whoami" > ${{ env.LOG_DIR }}/jump_host.log 2>&1 || { 
            echo "ERROR: Jump host connection failed with code $?" | tee -a ${{ env.LOG_DIR }}/run_log.txt
            cat ${{ env.LOG_DIR }}/jump_host.log | tee -a ${{ env.LOG_DIR }}/run_log.txt
            exit 1
          }
          cat ${{ env.LOG_DIR }}/jump_host.log | tee -a ${{ env.LOG_DIR }}/run_log.txt
      
      - name: SSH to compute node
        run: |
          echo "Testing connection to compute node:" | tee -a ${{ env.LOG_DIR }}/run_log.txt
          ssh -v bmicluster-compute "hostname && whoami" > ${{ env.LOG_DIR }}/compute_node.log 2>&1 || {
            echo "ERROR: Compute node connection failed with code $?" | tee -a ${{ env.LOG_DIR }}/run_log.txt
            cat ${{ env.LOG_DIR }}/compute_node.log | tee -a ${{ env.LOG_DIR }}/run_log.txt
            exit 1
          }
          cat ${{ env.LOG_DIR }}/compute_node.log | tee -a ${{ env.LOG_DIR }}/run_log.txt
          
      - name: Test directory access
        run: |
          echo "Testing access to target directory:" | tee -a ${{ env.LOG_DIR }}/run_log.txt
          ssh bmicluster-compute "ls -la /data/barskilab/scidap_server" > ${{ env.LOG_DIR }}/dir_access.log 2>&1 || {
            echo "ERROR: Directory access failed with code $?" | tee -a ${{ env.LOG_DIR }}/run_log.txt
            cat ${{ env.LOG_DIR }}/dir_access.log | tee -a ${{ env.LOG_DIR }}/run_log.txt
            exit 1
          }
          cat ${{ env.LOG_DIR }}/dir_access.log | tee -a ${{ env.LOG_DIR }}/run_log.txt
          
      - name: Test Singularity
        run: |
          echo "Testing Singularity module:" | tee -a ${{ env.LOG_DIR }}/run_log.txt
          ssh bmicluster-compute << 'EOF' > ${{ env.LOG_DIR }}/singularity_test.log 2>&1
          echo "Loading module..."
          module load singularity/3.7.0 || echo "Failed to load module with code $?"
          
          echo "Checking singularity command:"
          which singularity || echo "Singularity command not found with code $?"
          
          echo "Checking singularity version:"
          singularity --version || echo "Failed to get version with code $?"
          
          echo "Creating test directory:"
          TEMP_DIR=$(mktemp -d)
          cd "${TEMP_DIR}"
          pwd
          
          echo "Testing mkdir in destination:"
          mkdir -p /data/barskilab/scidap_server/singularity_images || echo "Failed to create directory with code $?"
          
          echo "Testing write to destination:"
          echo "test" > /data/barskilab/scidap_server/singularity_images/test.txt || echo "Failed to write test file with code $?"
          
          echo "Done with tests"
          EOF
          
          cat ${{ env.LOG_DIR }}/singularity_test.log | tee -a ${{ env.LOG_DIR }}/run_log.txt
          
      - name: Print full logs
        if: always()
        run: |
          echo "=============== FULL LOG OUTPUT ==============="
          cat ${{ env.LOG_DIR }}/run_log.txt
          echo "============== END OF LOG OUTPUT =============="
          
      - name: Copy logs locally
        if: always()
        run: |
          cp ${{ env.LOG_DIR }}/run_log.txt ~/workflow_run_log.txt
          echo "Full logs saved to ~/workflow_run_log.txt"
          
  mini_deploy:
    needs: test_connection
    runs-on: self-hosted
    env:
      DOCKER_TAG: v0.0.30
    steps:
      - name: Create minimal deploy script
        run: |
          cat > /tmp/mini_deploy.sh << 'EOL'
          #!/bin/bash
          set -e  # Exit on error
          set -x  # Echo commands
          
          # Configuration
          IMAGE_NAME="biowardrobe2/scidap-deseq"
          SINGULARITY_IMAGE_DIR="/data/barskilab/scidap_server/singularity_images"
          VERSION="${1:-v0.0.30}" 
          SINGULARITY_FILENAME="biowardrobe2_scidap-deseq:${VERSION}.sif"
          
          echo "Running as: $(whoami) on $(hostname)"
          echo "Creating directory: ${SINGULARITY_IMAGE_DIR}"
          mkdir -p "${SINGULARITY_IMAGE_DIR}"
          
          echo "Loading singularity module..."
          module load singularity/3.7.0
          
          echo "Singularity version: $(singularity --version)"
          
          # Create a version file only (without pulling the image)
          echo "Creating version file only..."
          echo "${VERSION}" > "${SINGULARITY_IMAGE_DIR}/scidap-deseq-version.txt"
          
          echo "Success! Created: ${SINGULARITY_IMAGE_DIR}/scidap-deseq-version.txt"
          EOL
          
      - name: Copy minimal script to compute node
        run: |
          scp /tmp/mini_deploy.sh bmicluster-compute:/tmp/mini_deploy.sh > ${{ env.LOG_DIR }}/scp.log 2>&1 || {
            echo "ERROR: SCP failed with code $?"
            cat ${{ env.LOG_DIR }}/scp.log
            exit 1
          }
          ssh bmicluster-compute "chmod +x /tmp/mini_deploy.sh"
          
      - name: Run minimal deployment
        run: |
          ssh bmicluster-compute "/tmp/mini_deploy.sh ${{ env.DOCKER_TAG }}" > ${{ env.LOG_DIR }}/deploy.log 2>&1 || {
            echo "ERROR: Deployment failed with code $?"
            cat ${{ env.LOG_DIR }}/deploy.log
            exit 1
          }
          cat ${{ env.LOG_DIR }}/deploy.log
          
      - name: Verify minimal deployment
        run: |
          ssh bmicluster-compute "cat /data/barskilab/scidap_server/singularity_images/scidap-deseq-version.txt" > ${{ env.LOG_DIR }}/verify.log 2>&1 || {
            echo "ERROR: Verification failed with code $?"
            cat ${{ env.LOG_DIR }}/verify.log
            exit 1
          }
          cat ${{ env.LOG_DIR }}/verify.log 