name: Deploy to HPC

on:
  workflow_dispatch:
    inputs:
      docker_tag:
        description: 'Docker tag to deploy'
        required: false
        type: string
        default: 'v0.0.31'
      target_host:
        description: 'Target HPC host'
        required: false
        type: string
        default: 'bmicluster-compute'
  workflow_run:
    workflows: ["Build and Push Docker Image"]
    types:
      - completed
    branches:
      - master
      - main

jobs:
  deploy:
    name: Deploy to HPC
    runs-on: self-hosted
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history to extract the correct tag
      
      - name: Download artifacts if workflow_run triggered
        if: ${{ github.event_name == 'workflow_run' }}
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{ github.event.workflow_run.id }}
            });
            
            const matchArtifact = artifacts.data.artifacts.find(artifact => {
              return artifact.name == "docker-tag"
            });
            
            if (matchArtifact) {
              const download = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: matchArtifact.id,
                archive_format: 'zip'
              });
              
              const fs = require('fs');
              fs.writeFileSync('docker-tag.zip', Buffer.from(download.data));
              console.log('Artifact downloaded');
              
              const { execSync } = require('child_process');
              execSync('unzip docker-tag.zip');
              const dockerTag = fs.readFileSync('docker_tag.txt', 'utf8').trim();
              console.log(`Using Docker tag from previous workflow: ${dockerTag}`);
              
              // Set output for use in later steps
              core.exportVariable('DOCKER_TAG', dockerTag);
            } else {
              console.log('No docker-tag artifact found, using default tag');
              core.exportVariable('DOCKER_TAG', 'v0.0.31');
            }
            core.exportVariable('TARGET_HOST', 'bmicluster-compute');
      
      - name: Set Docker tag from git or input
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          # Use the input value
          echo "DOCKER_TAG=${{ github.event.inputs.docker_tag }}" >> $GITHUB_ENV
          echo "TARGET_HOST=${{ github.event.inputs.target_host }}" >> $GITHUB_ENV
          
          echo "Using Docker tag: ${{ github.event.inputs.docker_tag }}"
          echo "Using target host: ${{ github.event.inputs.target_host }}"
      
      - name: Display active settings
        run: |
          echo "Using Docker tag: $DOCKER_TAG"
          echo "Using target host: $TARGET_HOST"
      
      - name: Setup SSH key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          set -x  # Echo commands for better debugging
          
          # Create .ssh directory
          mkdir -p ~/.ssh
          
          # Debug: Check if secret is available
          echo "Checking if SSH_PRIVATE_KEY secret is available..."
          if [ -z "$SSH_PRIVATE_KEY" ]; then
            echo "ERROR: SSH_PRIVATE_KEY secret is empty or not set"
            exit 1
          fi
          
          # Create the SSH key with proper format
          printf "%s\n" "$SSH_PRIVATE_KEY" > ~/.ssh/github_action_key
          
          # Debug: Check key file content
          echo "Checking key file content..."
          if [ ! -s ~/.ssh/github_action_key ]; then
            echo "ERROR: Key file is empty"
            exit 1
          fi
          
          # Verify the key format
          if ! grep -q "BEGIN OPENSSH PRIVATE KEY" ~/.ssh/github_action_key; then
            echo "ERROR: Key does not contain proper OpenSSH format"
            echo "First line of key:"
            head -n 1 ~/.ssh/github_action_key
            echo "Last line of key:"
            tail -n 1 ~/.ssh/github_action_key
            echo "Key file size:"
            ls -l ~/.ssh/github_action_key
            exit 1
          fi
          
          # Set proper permissions
          chmod 600 ~/.ssh/github_action_key
          
          # Check key format validity
          echo "Key fingerprint:"
          ssh-keygen -l -f ~/.ssh/github_action_key || {
            echo "ERROR: Invalid key format"
            echo "Key contents (first line):"
            head -n 1 ~/.ssh/github_action_key
            echo "Key file size:"
            ls -l ~/.ssh/github_action_key
            exit 1
          }
          
          # Start SSH agent
          eval $(ssh-agent -s)
          ssh-add -v ~/.ssh/github_action_key || {
            echo "ERROR: Failed to add key to SSH agent"
            echo "SSH agent status:"
            ssh-agent
            echo "Key file permissions:"
            ls -l ~/.ssh/github_action_key
            exit 1
          }
          
          # Create SSH config with the exact configuration needed
          cat > ~/.ssh/config << EOF
          Host bmicluster
            HostName bmiclusterp.chmcres.cchmc.org
            User pavb5f
            IdentityFile ~/.ssh/github_action_key
            IdentitiesOnly yes
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
            LogLevel ERROR
            PreferredAuthentications publickey
            BatchMode yes
            ServerAliveInterval 60
            ServerAliveCountMax 3

          Host bmicluster-compute
            User pavb5f
            HostName bmi-460g10-04.chmcres.cchmc.org
            IdentityFile ~/.ssh/github_action_key
            IdentitiesOnly yes
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
            LogLevel ERROR
            PreferredAuthentications publickey
            BatchMode yes
            ServerAliveInterval 60
            ServerAliveCountMax 3
            ProxyCommand ssh -i ~/.ssh/github_action_key -W %h:%p bmicluster
          EOF
          
          # Set proper permissions for config
          chmod 600 ~/.ssh/config
          
          # Show system information
          echo "=== SYSTEM INFO ==="
          uname -a
          which ssh
          ssh -V
      
      - name: Test SSH connection
        run: |
          # Test direct connection to compute node via ProxyCommand
          echo "Testing SSH connection to bmicluster-compute..."
          
          # Make sure SSH agent is running
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/github_action_key
          
          # Test connection to jump host first (suppress output)
          echo "Testing connection to jump host..."
          ssh -i ~/.ssh/github_action_key -q bmicluster "bash --noprofile --norc -c 'echo \"Jump host connection succeeded\"'" || {
            echo "ERROR: SSH connection to jump host failed"
            exit 1
          }
          
          # Now test connection to compute node (suppress output)
          echo "Testing connection to compute node..."
          ssh -i ~/.ssh/github_action_key -q bmicluster-compute "bash --noprofile --norc -c 'hostname >/dev/null 2>&1 && echo \"SSH_CONNECTION_SUCCESS\"'" || {
            echo "ERROR: SSH connection to compute node failed"
            exit 1
          }
      
      - name: Deploy to HPC
        run: |
          # Use environment variables
          echo "Deploying docker tag: $DOCKER_TAG to bmicluster-compute..."
          
          # First, verify SSH connection (suppress output)
          if ! ssh -i ~/.ssh/github_action_key -q bmicluster-compute "bash --noprofile --norc -c 'hostname >/dev/null 2>&1'"; then
            echo "ERROR: Cannot connect to compute node for deployment"
            exit 1
          fi
          
          # Check if Singularity is available on the compute node (via module)
          echo "Setting up Singularity on compute node..."
          ssh -i ~/.ssh/github_action_key -q bmicluster-compute "bash --noprofile --norc -c 'export TERM=dumb && module load singularity/3.7.0 >/dev/null 2>&1 || echo \"Failed to load singularity module\"'" || {
            echo "ERROR: Failed to set up environment on compute node"
            exit 1
          }
          
          # Create the singularity script content
          echo '#!/bin/bash' > singularity_deploy.sh
          echo '' >> singularity_deploy.sh
          echo '# Exit on error' >> singularity_deploy.sh
          echo 'set -e' >> singularity_deploy.sh
          echo '' >> singularity_deploy.sh
          echo '# Set environment variables' >> singularity_deploy.sh
          echo 'export TERM=dumb' >> singularity_deploy.sh
          echo '' >> singularity_deploy.sh
          echo '# Configuration' >> singularity_deploy.sh
          echo 'IMAGES_DIR="/data/barskilab/scidap_server/singularity_images"' >> singularity_deploy.sh
          echo 'SINGULARITY_MODULE="singularity/3.7.0"' >> singularity_deploy.sh
          echo 'LOG_FILE="${IMAGES_DIR}/update_images.log"' >> singularity_deploy.sh
          echo 'DOCKER_TAG="$1"' >> singularity_deploy.sh
          echo '' >> singularity_deploy.sh
          echo '# Logging function' >> singularity_deploy.sh
          echo 'log() {' >> singularity_deploy.sh
          echo '    echo "[$(date '\''+%Y-%m-%d %H:%M:%S'\'')]" $1 | tee -a "$LOG_FILE"' >> singularity_deploy.sh
          echo '}' >> singularity_deploy.sh
          echo '' >> singularity_deploy.sh
          echo '# Error handling function' >> singularity_deploy.sh
          echo 'handle_error() {' >> singularity_deploy.sh
          echo '    log "ERROR: $1"' >> singularity_deploy.sh
          echo '    exit 1' >> singularity_deploy.sh
          echo '}' >> singularity_deploy.sh
          echo '' >> singularity_deploy.sh
          echo 'log "Starting deployment of biowardrobe2/scidap-deseq:${DOCKER_TAG}"' >> singularity_deploy.sh
          echo '' >> singularity_deploy.sh
          echo '# Check if required module is available and load it' >> singularity_deploy.sh
          echo 'log "Loading module $SINGULARITY_MODULE"' >> singularity_deploy.sh
          echo 'module load "$SINGULARITY_MODULE" >/dev/null 2>&1 || handle_error "Failed to load module $SINGULARITY_MODULE"' >> singularity_deploy.sh
          echo '' >> singularity_deploy.sh
          echo '# Create images directory if it doesn'\''t exist' >> singularity_deploy.sh
          echo 'mkdir -p "$IMAGES_DIR" || handle_error "Failed to create directory $IMAGES_DIR"' >> singularity_deploy.sh
          echo '' >> singularity_deploy.sh
          echo '# Process image' >> singularity_deploy.sh
          echo 'full_image_name="biowardrobe2/scidap-deseq"' >> singularity_deploy.sh
          echo 'version="${DOCKER_TAG}"' >> singularity_deploy.sh
          echo 'image_name=$(basename "$full_image_name")' >> singularity_deploy.sh
          echo 'target_name="biowardrobe2_${image_name}"' >> singularity_deploy.sh
          echo 'old_image="${target_name}:${version}.sif"' >> singularity_deploy.sh
          echo 'new_image="${image_name}_${version}.sif"' >> singularity_deploy.sh
          echo 'docker_image="${full_image_name}:${version}"' >> singularity_deploy.sh
          echo '' >> singularity_deploy.sh
          echo 'log "Processing image: $docker_image"' >> singularity_deploy.sh
          echo '' >> singularity_deploy.sh
          echo '# Remove old image if it exists' >> singularity_deploy.sh
          echo 'if [ -f "$IMAGES_DIR/$old_image" ]; then' >> singularity_deploy.sh
          echo '    log "Removing old image: $old_image"' >> singularity_deploy.sh
          echo '    rm "$IMAGES_DIR/$old_image" || handle_error "Failed to remove old image $old_image"' >> singularity_deploy.sh
          echo 'fi' >> singularity_deploy.sh
          echo '' >> singularity_deploy.sh
          echo '# Pull new image' >> singularity_deploy.sh
          echo 'log "Pulling new image: $docker_image"' >> singularity_deploy.sh
          echo 'cd /tmp' >> singularity_deploy.sh
          echo 'singularity pull "docker://$docker_image" || handle_error "Failed to pull image $docker_image"' >> singularity_deploy.sh
          echo '' >> singularity_deploy.sh
          echo '# Move and rename the image' >> singularity_deploy.sh
          echo 'log "Moving and renaming image: $new_image -> $old_image"' >> singularity_deploy.sh
          echo 'mv "$new_image" "$IMAGES_DIR/$old_image" || handle_error "Failed to move image $new_image"' >> singularity_deploy.sh
          echo '' >> singularity_deploy.sh
          echo 'log "Successfully updated $docker_image"' >> singularity_deploy.sh
          echo 'echo "SINGULARITY_DEPLOYMENT_SUCCESS"' >> singularity_deploy.sh
          
          # Upload the script to the compute node
          chmod +x singularity_deploy.sh
          scp -i ~/.ssh/github_action_key -q singularity_deploy.sh bmicluster-compute:/tmp/singularity_deploy.sh
          
          # Execute the script on the compute node (suppress output)
          echo "Deploying Singularity image for biowardrobe2/scidap-deseq:$DOCKER_TAG"
          ssh -i ~/.ssh/github_action_key -q bmicluster-compute "bash --noprofile --norc -c 'cd /tmp && chmod +x singularity_deploy.sh && ./singularity_deploy.sh \"$DOCKER_TAG\"'" || {
            echo "ERROR: Failed to deploy Singularity image"
            exit 1
          }
          
          # Verify deployment (suppress output)
          echo "Verifying deployment..."
          VERIFY_DEPLOY=$(ssh -i ~/.ssh/github_action_key -q bmicluster-compute "bash --noprofile --norc -c 'export TERM=dumb && ls -la /data/barskilab/scidap_server/singularity_images/biowardrobe2_scidap-deseq:$DOCKER_TAG.sif 2>/dev/null || echo \"Not found\"'")
          
          if [[ $VERIFY_DEPLOY != *"Not found"* ]]; then
            echo "✅ Deployment successful!"
            echo "Singularity image deployed to: /data/barskilab/scidap_server/singularity_images/biowardrobe2_scidap-deseq:$DOCKER_TAG.sif"
          else
            echo "⚠️ WARNING: Could not verify deployment - image not found"
            echo "Manual verification may be required"
          fi
      
      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/github_action_key ~/.ssh/config singularity_deploy.sh 2>/dev/null || true